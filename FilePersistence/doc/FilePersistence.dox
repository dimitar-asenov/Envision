/*! \namespace FilePersistence

Thes FilePersistence plug-in implements a file and a clipboard application model stores based on XML.

With the help of the FileStore class a model can be stored as files on disk, where each persistence
unit is saved to a different file. The precise data format is described below.

The SystemClipboard class provides access to the system clipboard. It offers functionality to copy
a node or a list of nodes to the clipboard. Nodes are copied as an XML text which is described in
appendix A.3. Nodes from the clipboard can be pasted into a node of a list type or can be used
to replace other nodes in the model.

<h3>Data persistence format</h3>
When application models are stored on disk using the FileStore persistent store they are stored in a
series of XML files. To describe the format of these files we will use the simple application model
shown in the figure below.

\image html "examplePersistentUnit.png" "A binary node hierarchy with a persistent unit"

The image shows a model called \e units that contains 8 nodes. During the store operation each node
is assigned a unique id. The node ids are indicated in the corresponding circle. Nodes 0,2,4 and 6
are of type BinaryNode. A binary node always has a name an optionally has a left and right nodes.
The name is just a string. Node 2 in the figure is a persistence unit. Persistence units are saved
in separate files by the FileStore class.

There is a master file which belongs to the main persistence unit (the model) and a file for each
other persistence unit if any. Here is an example of a master file:

\verbatim
<!DOCTYPE EnvisionFilePersistence>
<model nextid="8">
	<BinaryNode id="0" name="units" partial="0">
		<Text id="1" name="name" partial="0" >S_root</Text>
		<persistencenewunitname ="left">S_2</persistencenewunit>
		<BinaryNode id="4" name="right" partial="0">
			<Text id="5" name="name" partial="0">S_second</Text>
		</BinaryNode>
	</BinaryNode>
</model >
\endverbatim

The root element is \e model and its \e nextid attribute indicates the id that should be given
to the next node that is created. This is necessary in order to give each node a unique id.

The tag name of all elements other than the model defines the type of the node they represent.
The model always contains only one node - the root node. In this case a BinaryNode. Each node
has the following attributes:
	\li \b id - the integer id of the node.
	\li \b name - the name of the node. This is always set by the parent of the node. The name
		of the root node is the model (application) name. This is the name by which the parent
		identifies the node. If the node has a name of its own (such as the name of a
		method node), this will appear as a sub-element of the node, rather than an attribute.
	\li \b partial - whether the node should be partially loaded if possible. If this is 1,
		nodes which support partial loading should only load their content partially to avoid
		too much memory overhead. This property is controlled by the parent. Note that this is
		only a hint and the application model will ultimately decide which nodes are partially
		loaded or not, regardless of this of flag.

The sub-elements of a node are defined by the Node::store method. They represent the content of
the node. There are only three exceptions: String, Integer and Double value nodes. The value of
such nodes is saved directly as text into the XML file. Depending on the node type the value is
prefixed with 'S_', 'I_' or 'D_' for String, Integer and Double respectively. The root
node above has sub-nodes \e name, \e left  and \e right.

\b persistencenewunit is a special node which indicates that its content is defined in a
different file. The type of this node is also defined in that file. The file name is represented
as a string and is therefore preceded by 'S_'. In the example above this filename is simply '2'.
Here is the content of that file:

\verbatim
<!DOCTYPE EnvisionFilePersistence>
<BinaryNodePersistenceUnit id="2" name="left" partial="0">
	<Text id ="3" name="name" partial="0">S_first</Text>
	<BinaryNode id="6" name="left" partial="0">
		<Text id="7" name="name" partial="0">S_last</Text>
	</BinaryNode>
</BinaryNodePersistenceUnit>
\endverbatim

Its structure is identical to the one of the master file, with the exception of the model
top-level element which is absent. It is possible to have nested persistence unit nodes,
in which case each new unit will be saved in its own file.

<h3>Format of the clipboard store</h3>
When using the ClipboardStore class provided by FilePersistence any copied nodes are stored
as text in the system clipboard. The format is similar to the one for persisting the model on
disk. Here is an example of two nodes being copied to clipboard:

\verbatim
<!DOCTYPE EnvisionFilePersistence>
<clipboard>
	<BinaryNode name="0" partial="0">
		<Text name="name" partial="0">S_first</Text>
	</BinaryNode>
	<BinaryNode name="1" partial="0">
		<Text name="name" partial="0">S_second</Text>
	</BinaryNode>
</clipboard>
\endverbatim

The main element is \e clipboard and it contains one sub-element for each node that was copied.
The structure of these sub-node elements is identical to the one discussed above, with the
following differences:
	\li There is no \e node \e id attribute. This attribute is meaningless across projects
		as it is specific for a model.
	\li The partial hint is always set to 0. Nodes loaded from the clipboard cannot be partially
		loaded.
	\li For direct children of clipboard the \e name attribute is simply an index that ranges
		from 0 to one less than the number of nodes copied to the clipboard.
*/